// <auto-generated />
using System;
using D301_WebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace D301_WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200917031026_ColumnsAddedFoodTypeAlcoholLactate")]
    partial class ColumnsAddedFoodTypeAlcoholLactate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7");

            modelBuilder.Entity("D301_WebApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivityLevel")
                        .HasColumnType("TEXT");

                    b.Property<float>("AlcoholGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("AlphaLinolenicAcidGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("BetaCaroteneGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("CalciumGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("CarbohydratesGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("CholesterolGoal")
                        .HasColumnType("REAL");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<float>("DietaryFibreGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("DietaryFolateGoal")
                        .HasColumnType("REAL");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<float>("EnegryGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("EnegryNIPGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("FatGoal")
                        .HasColumnType("REAL");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("GoalUnit")
                        .HasColumnType("TEXT");

                    b.Property<float>("Height")
                        .HasColumnType("REAL");

                    b.Property<string>("HeightUnit")
                        .HasColumnType("TEXT");

                    b.Property<float>("IodineGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("IronGoal")
                        .HasColumnType("REAL");

                    b.Property<bool>("Lactating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<float>("LinoleicAcidGoal")
                        .HasColumnType("REAL");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<float>("MUFAGoal")
                        .HasColumnType("REAL");

                    b.Property<string>("Macros")
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicalConditions")
                        .HasColumnType("TEXT");

                    b.Property<float>("NiacinGoal")
                        .HasColumnType("REAL");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<float>("PUFAGoal")
                        .HasColumnType("REAL");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<float>("PhosphorusGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("PotassiumGoal")
                        .HasColumnType("REAL");

                    b.Property<bool>("Pregnant")
                        .HasColumnType("INTEGER");

                    b.Property<float>("ProteinGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("RiboflavinGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("SFAGoal")
                        .HasColumnType("REAL");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("SeleniumGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("SodiumGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("StarchGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("SugarsGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("ThiaminGoal")
                        .HasColumnType("REAL");

                    b.Property<string>("TrainerId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<float>("VitaminAGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminB12Goal")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminB6Goal")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminCGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminDGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminEGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("WaterGoal")
                        .HasColumnType("REAL");

                    b.Property<float>("Weight")
                        .HasColumnType("REAL");

                    b.Property<string>("WeightUnit")
                        .HasColumnType("TEXT");

                    b.Property<float>("ZincGoal")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("D301_WebApp.Data.CustomFood", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<float>("Alcohol")
                        .HasColumnType("REAL");

                    b.Property<float>("AlphaLinolenicAcid")
                        .HasColumnType("REAL");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<float>("BetaCarotene")
                        .HasColumnType("REAL");

                    b.Property<float>("Calcium")
                        .HasColumnType("REAL");

                    b.Property<float>("Carbohydrates")
                        .HasColumnType("REAL");

                    b.Property<float>("Cholesterol")
                        .HasColumnType("REAL");

                    b.Property<float>("DietaryFibre")
                        .HasColumnType("REAL");

                    b.Property<float>("DietaryFolate")
                        .HasColumnType("REAL");

                    b.Property<float>("Enegry")
                        .HasColumnType("REAL");

                    b.Property<float>("EnegryNIP")
                        .HasColumnType("REAL");

                    b.Property<float>("Fat")
                        .HasColumnType("REAL");

                    b.Property<float>("Iodine")
                        .HasColumnType("REAL");

                    b.Property<float>("Iron")
                        .HasColumnType("REAL");

                    b.Property<float>("LinoleicAcid")
                        .HasColumnType("REAL");

                    b.Property<float>("MUFA")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<float>("Niacin")
                        .HasColumnType("REAL");

                    b.Property<float>("PUFA")
                        .HasColumnType("REAL");

                    b.Property<float>("Phosphorus")
                        .HasColumnType("REAL");

                    b.Property<float>("Potassium")
                        .HasColumnType("REAL");

                    b.Property<float>("Protein")
                        .HasColumnType("REAL");

                    b.Property<float>("Riboflavin")
                        .HasColumnType("REAL");

                    b.Property<float>("SFA")
                        .HasColumnType("REAL");

                    b.Property<float>("Selenium")
                        .HasColumnType("REAL");

                    b.Property<float>("Sodium")
                        .HasColumnType("REAL");

                    b.Property<float>("Starch")
                        .HasColumnType("REAL");

                    b.Property<float>("Sugars")
                        .HasColumnType("REAL");

                    b.Property<float>("Thiamin")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminA")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminB12")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminB6")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminC")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminD")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminE")
                        .HasColumnType("REAL");

                    b.Property<float>("Water")
                        .HasColumnType("REAL");

                    b.Property<float>("Zinc")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("CustomFood");
                });

            modelBuilder.Entity("D301_WebApp.Data.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<float>("Alcohol")
                        .HasColumnType("REAL");

                    b.Property<float>("AlphaLinolenicAcid")
                        .HasColumnType("REAL");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<float>("BetaCarotene")
                        .HasColumnType("REAL");

                    b.Property<float>("Calcium")
                        .HasColumnType("REAL");

                    b.Property<float>("Carbohydrates")
                        .HasColumnType("REAL");

                    b.Property<float>("Cholesterol")
                        .HasColumnType("REAL");

                    b.Property<float>("DietaryFibre")
                        .HasColumnType("REAL");

                    b.Property<float>("DietaryFolate")
                        .HasColumnType("REAL");

                    b.Property<float>("Enegry")
                        .HasColumnType("REAL");

                    b.Property<float>("EnegryNIP")
                        .HasColumnType("REAL");

                    b.Property<float>("Fat")
                        .HasColumnType("REAL");

                    b.Property<float>("Iodine")
                        .HasColumnType("REAL");

                    b.Property<float>("Iron")
                        .HasColumnType("REAL");

                    b.Property<float>("LinoleicAcid")
                        .HasColumnType("REAL");

                    b.Property<float>("MUFA")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<float>("Niacin")
                        .HasColumnType("REAL");

                    b.Property<float>("PUFA")
                        .HasColumnType("REAL");

                    b.Property<float>("Phosphorus")
                        .HasColumnType("REAL");

                    b.Property<float>("Potassium")
                        .HasColumnType("REAL");

                    b.Property<float>("Protein")
                        .HasColumnType("REAL");

                    b.Property<float>("Riboflavin")
                        .HasColumnType("REAL");

                    b.Property<float>("SFA")
                        .HasColumnType("REAL");

                    b.Property<float>("Selenium")
                        .HasColumnType("REAL");

                    b.Property<float>("Sodium")
                        .HasColumnType("REAL");

                    b.Property<float>("Starch")
                        .HasColumnType("REAL");

                    b.Property<float>("Sugars")
                        .HasColumnType("REAL");

                    b.Property<float>("Thiamin")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminA")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminB12")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminB6")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminC")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminD")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminE")
                        .HasColumnType("REAL");

                    b.Property<float>("Water")
                        .HasColumnType("REAL");

                    b.Property<float>("Zinc")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("D301_WebApp.Data.FoodBookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomFoodId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomFoodId");

                    b.HasIndex("FoodId");

                    b.HasIndex("UserId");

                    b.ToTable("FoodBookmark");
                });

            modelBuilder.Entity("D301_WebApp.Data.FoodVariation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<string>("FoodId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodVariation");
                });

            modelBuilder.Entity("D301_WebApp.Data.Intake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<string>("CustomFoodId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MealType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Measure")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VariationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VariationName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomFoodId");

                    b.HasIndex("FoodId");

                    b.HasIndex("UserId");

                    b.ToTable("Intake");
                });

            modelBuilder.Entity("D301_WebApp.Data.RDI", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgeRange")
                        .HasColumnType("TEXT");

                    b.Property<float>("Alcohol")
                        .HasColumnType("REAL");

                    b.Property<float>("AlphaLinolenicAcid")
                        .HasColumnType("REAL");

                    b.Property<float>("BetaCarotene")
                        .HasColumnType("REAL");

                    b.Property<float>("Calcium")
                        .HasColumnType("REAL");

                    b.Property<float>("Carbohydrates")
                        .HasColumnType("REAL");

                    b.Property<float>("Cholesterol")
                        .HasColumnType("REAL");

                    b.Property<float>("DietaryFibre")
                        .HasColumnType("REAL");

                    b.Property<float>("DietaryFolate")
                        .HasColumnType("REAL");

                    b.Property<float>("Enegry")
                        .HasColumnType("REAL");

                    b.Property<float>("EnegryNIP")
                        .HasColumnType("REAL");

                    b.Property<float>("Fat")
                        .HasColumnType("REAL");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<float>("Iodine")
                        .HasColumnType("REAL");

                    b.Property<float>("Iron")
                        .HasColumnType("REAL");

                    b.Property<bool>("Lactating")
                        .HasColumnType("INTEGER");

                    b.Property<float>("LinoleicAcid")
                        .HasColumnType("REAL");

                    b.Property<float>("MUFA")
                        .HasColumnType("REAL");

                    b.Property<float>("Niacin")
                        .HasColumnType("REAL");

                    b.Property<float>("PUFA")
                        .HasColumnType("REAL");

                    b.Property<float>("Phosphorus")
                        .HasColumnType("REAL");

                    b.Property<float>("Potassium")
                        .HasColumnType("REAL");

                    b.Property<bool>("Pregnant")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Protein")
                        .HasColumnType("REAL");

                    b.Property<float>("Riboflavin")
                        .HasColumnType("REAL");

                    b.Property<float>("SFA")
                        .HasColumnType("REAL");

                    b.Property<float>("Selenium")
                        .HasColumnType("REAL");

                    b.Property<float>("Sodium")
                        .HasColumnType("REAL");

                    b.Property<float>("Starch")
                        .HasColumnType("REAL");

                    b.Property<float>("Sugars")
                        .HasColumnType("REAL");

                    b.Property<float>("Thiamin")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminA")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminB12")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminB6")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminC")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminD")
                        .HasColumnType("REAL");

                    b.Property<float>("VitaminE")
                        .HasColumnType("REAL");

                    b.Property<float>("Water")
                        .HasColumnType("REAL");

                    b.Property<float>("Zinc")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Rdi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("D301_WebApp.Data.FoodBookmark", b =>
                {
                    b.HasOne("D301_WebApp.Data.CustomFood", "CustomFood")
                        .WithMany()
                        .HasForeignKey("CustomFoodId");

                    b.HasOne("D301_WebApp.Data.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId");

                    b.HasOne("D301_WebApp.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("D301_WebApp.Data.FoodVariation", b =>
                {
                    b.HasOne("D301_WebApp.Data.Food", null)
                        .WithMany("Amounts")
                        .HasForeignKey("FoodId");
                });

            modelBuilder.Entity("D301_WebApp.Data.Intake", b =>
                {
                    b.HasOne("D301_WebApp.Data.CustomFood", "CustomFood")
                        .WithMany("Intakes")
                        .HasForeignKey("CustomFoodId");

                    b.HasOne("D301_WebApp.Data.Food", "Food")
                        .WithMany("Intakes")
                        .HasForeignKey("FoodId");

                    b.HasOne("D301_WebApp.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("D301_WebApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("D301_WebApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D301_WebApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("D301_WebApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
